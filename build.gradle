plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow' version '8.1.1' // Assurez-vous que la version est compatible avec votre version de Gradle
  id 'maven-publish'
  id 'org.jetbrains.kotlin.jvm'
}


java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(22)
  }
}

group = 'fr.dreamin'
version = '0.1.0'

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}


repositories {
  mavenCentral()
  mavenLocal()
  maven { url 'https://jitpack.io' }
  maven { url 'https://repo.papermc.io/repository/maven-public/'}
  maven { url 'https://oss.sonatype.org/content/groups/public/'}
  maven { url 'https://repo.xenondevs.xyz/releases'}
  maven { url "https://ci.mg-dev.eu/plugin/repository/everything"}
  maven { url "https://maven.citizensnpcs.co/repo"}
}

dependencies {
  compileOnly "io.papermc.paper:paper-api:1.21-R0.1-SNAPSHOT"
  implementation 'com.mojang:authlib:3.17.30'
  implementation 'com.google.code.gson:gson:2.8.9'
  compileOnly 'org.projectlombok:lombok:1.18.30'
  annotationProcessor 'org.projectlombok:lombok:1.18.30'
  implementation 'org.xerial:sqlite-jdbc:3.45.1.0'
  implementation 'xyz.xenondevs.invui:inventory-access-r20:1.37:remapped-mojang'
  implementation "xyz.xenondevs.invui:invui-kotlin:1.37"
  implementation 'fr.skytasul:glowingentities:1.3.5'
  implementation 'fr.mrmicky:fastboard:2.1.3'
  implementation 'net.kyori:adventure-nbt:4.12.0'
  compileOnly "com.bergerkiller.bukkit:BKCommonLib:1.21.1-v1"
  compileOnly('net.citizensnpcs:citizens-main:2.0.35-SNAPSHOT') {
    exclude group: '*', module: '*'
  }
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  implementation 'com.github.tritonmc:Triton:3.9.5'
}

def targetJavaVersion = 22
java {
  def javaVersion = JavaVersion.toVersion(targetJavaVersion)
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
  if (JavaVersion.current() < javaVersion) {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'

  if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
    options.release.set(targetJavaVersion)
  }
}

shadowJar {
  archiveClassifier.set('')
  configurations = [project.configurations.runtimeClasspath]
}

processResources {
  def props = [version: version]
  inputs.properties props
  filteringCharset 'UTF-8'
  filesMatching('plugin.yml') {
    expand props
  }
}
setLibsDirName("../test-server/plugins")
